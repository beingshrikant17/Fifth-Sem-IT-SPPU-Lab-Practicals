---------------------------------------------------
NAME: Pawar Shrikant Sanjeev
TEIT
Roll no. : 57
DAA - Assignment no. 1
---------------------------------------------------

CODE: Fractional Knapsack
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
typedef struct {
   int p;
   int w;
   float d;
} Item;

void input(Item items[],int sizeOfItems) {
   cout << "Enter total "<< sizeOfItems <<" item's values and weight" <<
   endl;
   for(int i = 0; i < sizeOfItems; i++) {
      cout << "Enter "<< i+1 << " p ";
      cin >> items[i].p;
      cout << "Enter "<< i+1 << " W ";
      cin >> items[i].w;
   }
}

void display(Item items[], int sizeOfItems) {
   int i;
   cout << "values: ";
   for(i = 0; i < sizeOfItems; i++) {
      cout << items[i].p << "\t";
   }
   cout << endl << "weight: ";
   for (i = 0; i < sizeOfItems; i++) {
      cout << items[i].w << "\t";
   }
   cout << endl;
}

bool compare(Item i1, Item i2) {
   return (i1.d > i2.d);
}

float knapsack(Item items[], int sizeOfItems, int W) {
   int i, j;
   float totalValue = 0, totalWeight = 0;
   for (i = 0; i < sizeOfItems; i++) {
      items[i].d = (float)items[i].p / items[i].w; //typecasting done (v is int and w is also int so we get final value of d as int)
   }

   sort(items, items+sizeOfItems, compare);
   for(i=0; i<sizeOfItems; i++) {
      if(totalWeight + items[i].w<= W) {
         totalValue += items[i].p ;
         totalWeight += items[i].w;
      } else {
         int wt = W-totalWeight;
         totalValue += (wt * items[i].d);
         totalWeight += wt;
         break;
      }
   }
   cout << "Total weight in bag " << totalWeight<<endl;
   return totalValue;
}
int main() {
   int W,ino;
   cout << "Enter Total No. of items: ";
   cin>>ino;
   Item items[ino];
   input(items, ino);
   cout << "Entered data \n";
   display(items,ino);
   cout<< "Enter Knapsack weight \n";
   cin >> W;
   float mxVal = knapsack(items, ino, W);
   cout << "Max value for "<< W <<" weight is "<< mxVal;
}


OUTPUT:

Enter Total No. of items: 4
Enter total 4 item's values and weight
Enter 1 p 12
Enter 1 W 15
Enter 2 p 16
Enter 2 W 19
Enter 3 p 13
Enter 3 W 17
Enter 4 p 15
Enter 4 W 16
Entered data
weight: 15      19      17      16
Enter Knapsack weight
50
Total weight in bag 50
Max value for 50 weight is 43
--------------------------------
Process exited after 22.68 seconds with return value 0
Press any key to continue . . .


-------------------------------------------------------------------------------
CODE: 0/1 Knapsack


    #include<iostream>
    using namespace std;
    //function to recursive check every subset of items
    int knapsack(int w[], int p[], int n, int M)
    {
        //In every pass, we can either include nth item or not
        //if the capacity of knapsack is left to NIL, no value can be attained
        if(M==0)
            return 0;   
        //if no more items are left, no value can be attained
        if(n==0)
            return 0;  
        //if current item, weighs more than the capacity of knapsack, it can not be included
        if(w[n-1]>M)
            return knapsack(w,p,n-1,M);
        //else select the maximum value of once including the current item and once not including it
        return max(knapsack(w,p,n-1,M),p[n-1]+knapsack(w,p,n-1,M-w[n-1]));
    }
    int main()
    {
        int i,n;
        int M;                  //capacity of knapsack
        cout<<"Enter the no. of items ";
        cin>>n;
        int w[n];                 //weight of item
        int p[n];                    //value of items
        cout<<"Enter the weight and price of all items"<<endl;
        for(i=0;i<n;i++)
        {
            cin>>w[i]>>p[i];
        }
        cout<<"enter the capacity of knapsack  ";
        cin>>M;
        cout<<"The maximum value of items that can be put into knapsack is "<<knapsack(w,p,n,M);
        return 0
    }
OUTPUT:

Enter the no. of items 4
Enter the weight and price of all items
12
24
30
31
25
22
20
10
enter the capacity of knapsack  24
The maximum value of items that can be put into knapsack is 24
--------------------------------
Process exited after 22.02 seconds with return value 0
Press any key to continue . . .